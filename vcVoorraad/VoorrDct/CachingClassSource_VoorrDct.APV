[MODULE]
NAME 'CachingClassSource_VoorrDct.clw'
[COMMON]
FROM ABC GENERATED
[PROCEDURE]
NAME CachingClassSource
NOEXPORT
[COMMON]
FROM MTMaxtel MT_ClassC7_Declaration
[PROMPTS]
%MTClassName DEFAULT  ('CachingClass')
%MTDefIncFileName DEFAULT  ('CachingClassDef.inc')
%MTSrcIncFileName DEFAULT  ('CachingClassSrc.inc')
%MTHandcode LONG  (0)
%MTNotType LONG  (1)
[EMBED]
EMBED %ClassDeclaration
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1620
PROPERTY:END
VerkoopArtikelQueue  QUEUE,PRE(VAQ),THREAD
VerkoopID               LONG
Artikelen				CSTRING(512)
					END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1620
PROPERTY:END
InkoopArtikelQueue  QUEUE,PRE(IAQ),THREAD
InkoopID                LONG
Artikelen				CSTRING(512)
					END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1800
PROPERTY:END
CelLocatieQueue		QUEUE,PRE(CLQ),THREAD
PartijID                LONG
CelID                   LONG
LocatieNaam				CSTRING(50)
					END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2001
PROPERTY:END
GetInkoopArtikelen	PROCEDURE(LONG PRM:InkoopID), STRING
GetVerkoopArtikelen PROCEDURE(LONG PRM:VerkoopID), STRING
GetCelLocatieNaam   PROCEDURE(LONG PRM:PartijID, LONG PRM:CelID), STRING
[END]
EMBED %ClassSource
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3240
PROPERTY:END
CachingClass.GetVerkoopArtikelen PROCEDURE(LONG PRM:VerkoopID)
SQLFile                                 &File
SQLGroup 								&GROUP
SQLField                                ANY
LastVerkoopID                           LONG
Artikelen								CSTRING(512)
CODE
    IF RECORDS(VerkoopArtikelQueue) = 0 THEN
        timingmeting# = CLOCK()
		SQLFile &= NEW(File)

		SQLFile{Prop:Driver}='MSSQL'
		SQLFile{Prop:DriverString}='/BUSYHANDLING=2'
		SQLFile{Prop:Owner}=GLO:Owner
		SQLFile{Prop:Sql}='SELECT Planning.VerkoopID, Planning.KG, ViewArtikel.ArtikelOms, Planning.MutatieGemaakt, Planning.MutatieKG '&|
			'FROM Planning INNER JOIN ViewArtikel ON ViewArtikel.ArtikelID = Planning.ArtikelID '&|
			'WHERE Planning.VerkoopID > 0 ORDER BY Planning.VerkoopID, Planning.PlanningID'

		LastVerkoopID = -1
		LaatsteRecord# = 0
		
		FIXFORMAT(SQLFile)	
		IF ERROR() THEN STOP(ERROR()&' bij de fixformat').
		SQLGroup &= SQLFile{Prop:Record}
		
		LOOP
			Next(SQLFile)
			IF ERROR() THEN LaatsteRecord# = 1.
			
			
			SQLField &= WHAT(SQLGroup,1)
			IF (LastVerkoopID <> SQLField OR LaatsteRecord#) THEN
				IF LastVerkoopID <> -1 THEN
					VAQ:VerkoopID = LastVerkoopID
					VAQ:Artikelen = Artikelen
					ADD(VerkoopArtikelQueue, +VAQ:VerkoopID)
				END
				
				IF LaatsteRecord# THEN
					BREAK
				ELSE
					LastVerkoopID = SQLField
					
					SQLField &= WHAT(SQLGroup,4) ! Pla:MutatieGemaakt
					IF SQLField = 1 THEN
						SQLField &= WHAT(SQLGroup,5)
					ELSE
						SQLField &= WHAT(SQLGroup,2)
					END
					Artikelen = CLIP(LEFT(FORMAT(SQLField,@n-12_`2))) & ' kg'
					SQLField &= WHAT(SQLGroup,3)
					Artikelen = CLIP(Artikelen) & ' ' & CLIP(SQLField)
				END
			ELSE
				SQLField &= WHAT(SQLGroup,4) ! Pla:MutatieGemaakt
				IF SQLField = 1 THEN
					SQLField &= WHAT(SQLGroup,5)
				ELSE
					SQLField &= WHAT(SQLGroup,2)
				END
				Artikelen = CLIP(Artikelen) & ' | ' & CLIP(LEFT(FORMAT(SQLField,@n-12_`2))) & ' kg'
				SQLField &= WHAT(SQLGroup,3)
				Artikelen = CLIP(Artikelen) & ' ' & CLIP(SQLField)
			END
		END	
		
		CLOSE(SQLFile)
		IF ERROR() THEN STOP(ERROR()&' bij de close').
		DISPOSE(SQLFile)
        IF ERROR() THEN STOP(ERROR()&' bij de dispose').

        GLO:TimingMeting[1] = CLOCK() - timingmeting#
        GlobalClass.RefreshTiming()
    END

	VAQ:VerkoopID = PRM:VerkoopID
	GET(VerkoopArtikelQueue, +VAQ:VerkoopID)
	IF NOT(ERROR()) THEN
		RETURN CLIP(VAQ:Artikelen)
	ELSE
		RETURN ''
	END

[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
CachingClass.GetInkoopArtikelen PROCEDURE(LONG PRM:InkoopID)
SQLFile                                 &File
SQLGroup 								&GROUP
SQLField                                ANY
LastInkoopID                           LONG
Artikelen								CSTRING(512)
CODE
    IF RECORDS(InkoopArtikelQueue) = 0 THEN
        timingmeting# = CLOCK()

		SQLFile &= NEW(File)

		SQLFile{Prop:Driver}='MSSQL'
		SQLFile{Prop:DriverString}='/BUSYHANDLING=2'
		SQLFile{Prop:Owner}=GLO:Owner
		SQLFile{Prop:Sql}='SELECT Planning.InkoopID, Planning.KG, ViewArtikel.ArtikelOms, Planning.MutatieGemaakt, Planning.MutatieKG '&|
			'FROM Planning INNER JOIN ViewArtikel ON ViewArtikel.ArtikelID = Planning.ArtikelID '&|
			'WHERE Planning.InkoopID > 0 ORDER BY Planning.InkoopID, Planning.PlanningID'

		LastInkoopID = -1
		LaatsteRecord# = 0
		
		FIXFORMAT(SQLFile)
		IF ERROR() THEN STOP(ERROR()&' bij de fixformat').
		SQLGroup &= SQLFile{Prop:Record}
		
		LOOP
			Next(SQLFile)
			IF ERROR() THEN LaatsteRecord# = 1.
			
			SQLField &= WHAT(SQLGroup,1)
			IF (LastInkoopID <> SQLField OR LaatsteRecord#) THEN
				IF LastInkoopID <> -1 THEN
					IAQ:InkoopID = LastInkoopID
					IAQ:Artikelen = Artikelen
					ADD(InkoopArtikelQueue, +IAQ:InkoopID)
				END
				
				IF LaatsteRecord# THEN
					BREAK
				ELSE
					LastInkoopID = SQLField
					SQLField &= WHAT(SQLGroup,4) ! Pla:MutatieGemaakt
					IF SQLField = 1 THEN
						SQLField &= WHAT(SQLGroup,5)
					ELSE
						SQLField &= WHAT(SQLGroup,2)
					END
					
					Artikelen = CLIP(LEFT(FORMAT(SQLField,@n-12_`2))) & ' kg'
					SQLField &= WHAT(SQLGroup,3)
					Artikelen = CLIP(Artikelen) & ' ' & CLIP(SQLField)
				END
			ELSE
				SQLField &= WHAT(SQLGroup,4) ! Pla:MutatieGemaakt
				IF SQLField = 1 THEN
					SQLField &= WHAT(SQLGroup,5)
				ELSE
					SQLField &= WHAT(SQLGroup,2)
				END
				Artikelen = CLIP(Artikelen) & ' | ' & CLIP(LEFT(FORMAT(SQLField,@n-12_`2))) & ' kg'
				SQLField &= WHAT(SQLGroup,3)
				Artikelen = CLIP(Artikelen) & ' ' & CLIP(SQLField)
			END
		END	
		
		CLOSE(SQLFile)
		IF ERROR() THEN STOP(ERROR()&' bij de close').
		DISPOSE(SQLFile)
        IF ERROR() THEN STOP(ERROR()&' bij de dispose').

        GLO:TimingMeting[2] = CLOCK() - timingmeting#
        GlobalClass.RefreshTiming()
	END

	IAQ:InkoopID = PRM:InkoopID
	GET(InkoopArtikelQueue, +IAQ:InkoopID)
	IF NOT(ERROR()) THEN
		RETURN CLIP(IAQ:Artikelen)
	ELSE
		RETURN ''
	END

[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
CachingClass.GetCelLocatieNaam PROCEDURE(LONG PRM:PartijID, LONG PRM:CelID)
CODE
    IF RECORDS(CelLocatieQueue)=0
        !timingmeting# = CLOCK()

		BUFFER(ViewPartijCelLocaties,5000)
		CLEAR(VPCL:Record)	
		SET(VPCL:ViewPartijCelLocaties_PK,VPCL:ViewPartijCelLocaties_PK)
		Loop Until Access:ViewPartijCelLocaties.Next()
			CLQ:PartijID=VPCL:PartijID
			CLQ:CelID=VPCL:CELID
			GET(CelLocatieQueue,+CLQ:PartijID,+CLQ:CelID)
			IF ERROR()
				CLQ:PartijID=VPCL:PartijID
				CLQ:CelID=VPCL:CELID
				if CLIP(VPCL:CelLocatienaam) = ''
					CLQ:LocatieNaam='?'
				ELSE
					CLQ:LocatieNaam=VPCL:CelLocatienaam
				END			
				ADD(CelLocatieQueue,+CLQ:PartijID,+CLQ:CelID)
			ELSE
				if CLIP(VPCL:CelLocatienaam) = ''
					! Controle of er een vraagteken in staat
					IF INSTRING('?',CLIP(CLQ:LocatieNaam),1,1)=0 ! Not Found
						CLQ:LocatieNaam = CLIP(CLQ:LocatieNaam) & ', ?'
					END	
				ELSE
					CLQ:LocatieNaam = CLIP(CLQ:LocatieNaam) & ', ' & CLIP(VPCL:CelLocatienaam)
				END	
				PUT(CelLocatieQueue)
			END
        END	

        FLUSH(ViewPartijCelLocaties)
		
		Loop i#=1 to Records(CelLocatieQueue)
			GET(CelLocatieQueue,i#)
			IF CLQ:LocatieNaam='?' THEN
				!Clear(CLQ:LocatieNaam)
                CLQ:LocatieNaam = ''
				PUT(CelLocatieQueue)
			END
        END	

        !GLO:TimingMeting[3] = CLOCK() - timingmeting#
        !GlobalClass.RefreshTiming()
	END

	CLQ:PartijID=PRM:PartijID
	CLQ:CelID=PRM:CELID
	GET(CelLocatieQueue,+CLQ:PartijID,+CLQ:CelID)
	IF ERROR()
		Return('')
	ELSE
		Return(CLIP(CLQ:LocatieNaam))
	END
[END]
[END]
[ADDITION]
NAME NetTalk Local_Use_NetRefresh
[INSTANCE]
INSTANCE 2
OWNER 3
[PROMPTS]
%NoNetRefreshHere LONG  (0)
%NetRefreshFrame LONG  (0)
%SendRefreshAtOK DEFAULT  ('Use Global Default')
%RefreshAnyway LONG  (0)
%DependOnAll LONG  (1)
%DependFiles MULTI LONG  ()
%DependFile DEPEND %DependFiles FILE TIMES 0

%DependFileHC DEPEND %DependFiles DEFAULT TIMES 0

%SendRefreshPrimary LONG  (1)
%RefreshFiles MULTI LONG  ()
%RefreshFile DEPEND %RefreshFiles FILE TIMES 0

[ADDITION]
NAME WinEvent WinEvent
[INSTANCE]
INSTANCE 1
OWNER 1
[PROMPTS]
%DisableWinEvent LONG  (0)
%AutoDown LONG  (0)
%NoAutoDown LONG  (0)
%LocWindowsVisible DEFAULT  ('0')
%EnableWheelMouse LONG  (0)
%AlertWinEventDebug LONG  (0)
%DisplayCompileDate LONG  (0)
%DisplayCompileDateFormat DEFAULT  ('@D6')
%WinAlert MULTI LONG  ()
%Mess DEPEND %WinAlert DEFAULT TIMES 0

%Act1 DEPEND %WinAlert DEFAULT TIMES 0

%act2 DEPEND %WinAlert DEFAULT TIMES 0

%SortListbox MULTI LONG  ()
%ThisListbox DEPEND %SortListbox DEFAULT TIMES 0

%ThisListboxHeader DEPEND %SortListbox MULTI DEFAULT TIMES 0

%gloWinEventTesting LONG  (0)
%gloWinEventTestingColor1 LONG  (15728618)
%gloWinEventTestingColor2 LONG  (16777215)
%WindowsVisibleAfterOpen LONG  (1)
%CheckForCantCloseNowSetHere LONG  (1)
%locNoHandleCloseDown LONG  (0)
%locCloseDownWhenWindowCloses LONG  (0)
%locCloseDownWhenWindowClosesSet LONG  (0)
%locCloseDownWhenWindowClosesCtrl DEFAULT  ('')
[END]
