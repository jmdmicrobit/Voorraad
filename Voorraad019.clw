

   MEMBER('Voorraad.clw')                                  ! This is a MEMBER module


   INCLUDE('ABTOOLBA.INC'),ONCE
   INCLUDE('ABWINDOW.INC'),ONCE
   INCLUDE('NetTalk.inc'),ONCE

                     MAP
                       INCLUDE('VOORRAAD019.INC'),ONCE        !Local module procedure declarations
                     END



!!! <summary>
!!! Generated from procedure template - Window
!!! </summary>
Systeembeheer PROCEDURE 

udpt            UltimateDebugProcedureTracker
LocEnableEnterByTab  BYTE(1)                               !Used by the ENTER Instead of Tab template
EnterByTabManager    EnterByTabClass
                              ! ----------- Begin Generated by NetTalk NetAuto CloseApp Controls
loc:MyX          long                            !
myServers       Queue(Net:AutoPublicServicesQType) ! list of servers for this service
MarkFlag           long
TempFlag           long
                 end
displayText      String(400)                     ! Warning message text
ShutdownText     String(400)                     ! Warning message text
CloseAppsServiceName  String (80)                ! Service Name - which you can change before the Init call.
                              ! ----------- End Generated by NetTalk NetAuto CloseApp Controls
Window               WINDOW('Caption'),AT(,,406,261),FONT('Microsoft Sans Serif',8,,FONT:regular,CHARSET:ANSI), |
  GRAY
                       GROUP(' &Application list '),AT(2,2,242,253),USE(?MachineGroup),BOXED
                         LIST,AT(6,13,233,238),USE(?ServersList),HVSCROLL,FORMAT('131L(2)|M~Description~@s80@43L' & |
  '(2)|M~NetName~@s80@53L(2)|M~IP Address~@s80@0L(2)|M~Speed~@s80@4L(2)|M~Service Name~@s80@'), |
  FROM(MyServers),MARK(MyServers.MarkFlag)
                       END
                       GROUP(' Warning message '),AT(251,2,153,166),USE(?WarningGroup),BOXED
                         TEXT,AT(258,13,139,127),USE(DisplayText),VSCROLL
                         BUTTON('&Warn All'),AT(347,147,50,14),USE(?SendWarning),TIP('Sends this warning message' & |
  ' to ALL the machines')
                         BUTTON('&Selection'),AT(258,147,50,14),USE(?WarningSelection),TIP('Send a warning to th' & |
  'e people you have selected')
                       END
                       GROUP(' Shutdown '),AT(251,170,153,52),USE(?Group3),BOXED
                         PROMPT('Important! This will close down these applications !!'),AT(258,181,135,25),USE(?Prompt1), |
  CENTER,TRN
                         BUTTON('Selec&tion'),AT(258,203,50,14),USE(?ShutdownSelection),TIP('Send the SHUTDOWN c' & |
  'ommand to the applications you have selected on the left<0DH,0AH>')
                         BUTTON('&All'),AT(347,203,50,14),USE(?ForceClose),TIP('SHUTDOWN ALL these application o' & |
  'n everyone<0DH,0AH>''''s machine.')
                       END
                       BUTTON('&Refresh'),AT(258,238,50,14),USE(?Refresh),TIP('Refresh the list of applications')
                       BUTTON('Close'),AT(347,238,50,14),USE(?CloseButton),TIP('Close this window only')
                     END

    omit('***',WE::CantCloseNowSetHereDone=1)  !Getting Nested omit compile error, then uncheck the "Check for duplicate CantCloseNowSetHere variable declaration" in the WinEvent local template
WE::CantCloseNowSetHereDone equate(1)
WE::CantCloseNowSetHere     long
    !***
ThisWindow           CLASS(WindowManager)
Init                   PROCEDURE(),BYTE,PROC,DERIVED
Kill                   PROCEDURE(),BYTE,PROC,DERIVED
TakeAccepted           PROCEDURE(),BYTE,PROC,DERIVED
TakeEvent              PROCEDURE(),BYTE,PROC,DERIVED
TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED
                     END

Toolbar              ToolbarClass
!Local Data Classes
ThisCloseApps        CLASS(NetCloseApps)                   ! Generated by NetTalk Extension (Class Definition)
ServersChanged         PROCEDURE(),DERIVED

                     END


  CODE
  GlobalResponse = ThisWindow.Run()                        ! Opens the window and starts an Accept Loop

!---------------------------------------------------------------------------
DefineListboxStyle ROUTINE
!|
!| This routine create all the styles to be shared in this window
!| It`s called after the window open
!|
!---------------------------------------------------------------------------

ThisWindow.Init PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
        udpt.Init(UD,'Systeembeheer','Voorraad019.clw','Voorraad.EXE','08/16/2019 @ 01:47PM')    
             
  GlobalErrors.SetProcedureName('Systeembeheer')
  SELF.Request = GlobalRequest                             ! Store the incoming request
  ReturnValue = PARENT.Init()
  IF ReturnValue THEN RETURN ReturnValue.
  SELF.FirstField = ?ServersList
  SELF.VCRRequest &= VCRRequest
  SELF.Errors &= GlobalErrors                              ! Set this windows ErrorManager to the global ErrorManager
  SELF.AddItem(Toolbar)
  CLEAR(GlobalRequest)                                     ! Clear GlobalRequest after storing locally
  CLEAR(GlobalResponse)
  SELF.Open(Window)                                        ! Open window
                                ! ----------- Begin Generated by NetTalk NetAuto CloseApp Controls
                                             ! Load the warning message from the NetTalk.ini file
  DisplayText = 'For maintainence reasons this program needs to be closed down. Please immediately save what you are doing and exit the program.'
  DisplayText = GetIni ('NetCloseAnApp_Voorraad', 'Warning Message', DisplayText, 'NetTalk.Ini')
  ShutdownText = 'For maintenance reasons this program needs to be closed down.'
  ShutdownText = GetIni ('NetCloseAnApp_Voorraad', 'Shutdown Message', ShutdownText, 'NetTalk.Ini')
  CloseAppsServiceName = 'NetCloseApp' & 'Voorraad'
  ThisCloseApps.init(clip(CloseAppsServiceName), NET:StartService+NET:DontAnnounceNow) ! Initialise the CloseApps object.
                                           ! Uses the Unique App Name specified in the template extension
  if ThisCloseApps.error <> 0
    ! Put code in here to handle if the object does not initialise properly
  end
  ThisCloseApps.servers &= Myservers        ! Set up the list of servers. Must do this after the init !!
  ThisCloseApps.GetServers()                ! Get a list of all the servers
  post (event:accepted, ?Refresh)             ! Push the Refresh Button
                                ! ----------- End Generated by NetTalk NetAuto CloseApp Controls
  ThisCloseApps.Announce(NET:OnlyOncePerThread)     ! Generated by NetTalk NetAuto CloseApp Controls
  Do DefineListboxStyle
  Alert(AltKeyPressed)  ! WinEvent : These keys cause a program to crash on Windows 7 and Windows 10.
  Alert(F10Key)         !
  Alert(CtrlF10)        !
  Alert(ShiftF10)       !
  Alert(CtrlShiftF10)   !
  Alert(AltSpace)       !
  WinAlertMouseZoom()
  WinAlert(WE::WM_QueryEndSession,,Return1+PostUser)
  Window{Prop:Alrt,255} = CtrlShiftP
  INIMgr.Fetch('Systeembeheer',Window)                     ! Restore window settings from non-volatile store
  SELF.SetAlerts()
  EnterByTabManager.Init(False)
  RETURN ReturnValue


ThisWindow.Kill PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
  putini ('NetCloseAnApp_Voorraad', 'Warning Message', DisplayText, 'NetTalk.Ini')  ! Generated by NetTalk NetAuto CloseApp Controls
  putini ('NetCloseAnApp_Voorraad', 'Shutdown Message', ShutdownText, 'NetTalk.Ini')  ! Generated by NetTalk NetAuto CloseApp Controls
  ThisCloseApps.Kill(Net:StopService+NET:DontAnnounceNow)      ! Generated by NetTalk NetAuto CloseApp Controls
  ThisCloseApps.Announce(NET:OnlyOncePerThread)     ! Generated by NetTalk NetAuto CloseApp Controls
  If self.opened Then WinAlert().
  ReturnValue = PARENT.Kill()
  IF ReturnValue THEN RETURN ReturnValue.
  IF SELF.Opened
    INIMgr.Update('Systeembeheer',Window)                  ! Save window data to non-volatile store
  END
  GlobalErrors.SetProcedureName
            
   
  RETURN ReturnValue


ThisWindow.TakeAccepted PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receive all EVENT:Accepted's
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
    CASE ACCEPTED()
    OF ?SendWarning
      ThisCloseApps.packet.ToNetName = ''
      ThisCloseApps.broadcast = 1
      ThisCloseApps.SendWarning(clip(DisplayText))                           ! Generated by NetTalk NetAuto CloseApp Controls
    OF ?WarningSelection
                                          ! ----------- Begin Generated by NetTalk NetAuto CloseApp Controls
      loop loc:MyX = 1 to records (MyServers)
        get (MyServers, loc:MyX)
        if MyServers.MarkFlag = 1
          ThisCloseApps.broadcast = 0
          ThisCloseApps.packet.ToNetName = clip (MyServers.NetName)
          ThisCloseApps.SendWarning(clip(DisplayText))            ! Send message just to this application
        end
      end
                                          ! ----------- End Generated by NetTalk NetAuto CloseApp Controls
    OF ?ShutdownSelection
                                          ! ----------- Begin Generated by NetTalk NetAuto CloseApp Controls
      if message (' Are you sure you want to close down| these selected applications?','Close Down Applications',|
                  ICON:Question, Button:Yes+Button:No) = Button:Yes
        loop loc:MyX = 1 to records (MyServers)
          get (MyServers, loc:MyX)
          if MyServers.MarkFlag = 1
            ThisCloseApps.broadcast = 0
            ThisCloseApps.packet.ToNetName = clip (MyServers.NetName)
            ThisCloseApps.SendShutDown(clip(ShutdownText))            ! Send Forced Close Down to this application
          end
        end
      end
                                    ! ----------- End Generated by NetTalk NetAuto CloseApp Controls
    END
  ReturnValue = PARENT.TakeAccepted()
    CASE ACCEPTED()
    OF ?ForceClose
      ThisWindow.Update()
                                    ! ----------- Begin Generated by NetTalk NetAuto CloseApp Controls
      if message (' Are you sure you want to close down| these applications on ALL the machines?','Close Down Applications',|
                  ICON:Question, Button:Yes+Button:No) = Button:Yes
        ThisCloseApps.packet.ToNetName = ''
        ThisCloseApps.broadcast = 1
        ThisCloseApps.SendShutDown(clip(ShutdownText))                                   ! Send Forced Close Down
      end
                                    ! ----------- End Generated by NetTalk NetAuto CloseApp Controls
    OF ?Refresh
      ThisWindow.Update()
                                    ! ----------- Begin Generated by NetTalk NetAuto CloseApp Controls
      ThisCloseApps.ReSync (NET:PACKET:ICanDo, 2)
      ThisCloseApps.GetServers()
      ThisCloseApps.ServersChanged()
                                    ! ----------- End Generated by NetTalk NetAuto CloseApp Controls
    OF ?CloseButton
      ThisWindow.Update()
      post (event:closeWindow)    ! close the window (kills NetCloseApps)      ! Generated by NetTalk NetAuto CloseApp Controls
    END
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWindow.TakeEvent PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receives all events
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
    ThisCloseApps.TakeEvent()                 ! Generated by NetTalk NetAuto CloseApp Controls
  IF EnterByTabManager.TakeEvent()
     RETURN(Level:Notify)
  END
  ReturnValue = PARENT.TakeEvent()
  If event() = event:VisibleOnDesktop !or event() = event:moved
    ds_VisibleOnDesktop()
  end
     IF KEYCODE()=CtrlShiftP AND EVENT() = Event:PreAlertKey
       CYCLE
     END
     IF KEYCODE()=CtrlShiftP  
        UD.ShowProcedureInfo('Systeembeheer',UD.SetApplicationName('Voorraad','EXE'),Window{PROP:Hlp},'02/09/2010 @ 01:17PM','08/16/2019 @ 01:47PM','10/11/2024 @ 01:55PM')  
    
       CYCLE
     END
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWindow.TakeWindowEvent PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receives all window specific events
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
    CASE EVENT()
    OF EVENT:CloseDown
      if WE::CantCloseNow
        WE::MustClose = 1
        cycle
      else
        self.CancelAction = cancel:cancel
        self.response = requestcancelled
      end
    END
  ReturnValue = PARENT.TakeWindowEvent()
    CASE EVENT()
    OF EVENT:OpenWindow
        post(event:visibleondesktop)
    END
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisCloseApps.ServersChanged PROCEDURE


  CODE
  PARENT.ServersChanged
    sort (self.Servers, self.Servers.Description)
    display()

